<h1>About</h1>
<p>組長:</p>
<p>41023217 41023217</p>
<p>組員:</p>
<p></p>
<p>41023201 ruoqinz0421</p>
<p>41023215 41023215</p>
<p>41023224 41023224</p>
<p></p>
<p><a href="https://mde.tw/pjcopsim">https://mde.tw/pjcopsim</a></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p><h2>Brython_ex2</h2>
<p>This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5.</p>
<p id="brython_div"></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p>Solve ODE:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new paragraph element and set its text content to the solution
p = document.createElement('p')
p.textContent = f"The solution to the ODE is: {y}"

# Append the paragraph element to the body of the webpage
document.body.appendChild(p)</pre>
<p></p>
<p>
<script type="text/python3">
from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)
</script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</p>
<p>Brython environment and <a href="https://plotly.com/javascript/">Plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
// ]]&gt;&lt;/script&gt;
&lt;p id="brython_div"&gt;&lt;/p&gt;</pre>
<p>Brython programe with Plotly.js:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, window

def dy_dx(y, x):
    return x - y

x_start = 0
x_end = 5
n_points = 100
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = 1.0
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))

# Create a new div element to hold the plot
#plot_div = document.createElement('div')
#plot_div.id = 'plot'
#document.body.appendChild(plot_div)
plot_div = document["brython_div"]

# Plot the solution using plotly.js
data = [{'x': x, 'y': y}]
window.Plotly.newPlot('brython_div', data)</pre>
<p>This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="mass-spring-damper"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

def dy_dx(y, x):
    y1, y2 = y
    return [y2, -(k/m)*y1 - (c/m)*y2]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [1.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(2)]
    y.append(y_new)

# Create a new div element to hold the plot
'''
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))]}]
layout = {'title': 'Mass-Spring-Damper System', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('mass-spring-damper', data, layout)
</script>
<p>This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using <a href="https://plotly.com/javascript/">plotly.js</a>.</p>
<p id="pid-control"></p>
<script type="text/python3">
from browser import document, window

m = 1.0  # mass
k = 1.0  # spring constant
c = 0.1  # damping coefficient

Kp = 10.0  # proportional gain
Ki = 1.0   # integral gain
Kd = 0.5   # derivative gain

def dy_dx(y, x):
    y1, y2, e_int, e_prev = y
    e = 1 - y1
    de_dt = -y2
    u = Kp * e + Ki * e_int + Kd * de_dt
    return [y2, (u - k*y1 - c*y2)/m, e, e]

x_start = 0
x_end = 20
n_points = 1000
x = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]
y0 = [0.0, 0.0, 0.0, 0.0]
h = x[1] - x[0]
y = [y0]
for i in range(1, len(x)):
    y_new = [y[-1][j] + h * dy_dx(y[-1], x[i-1])[j] for j in range(4)]
    y.append(y_new)

'''
# Create a new div element to hold the plot
plot_div = document.createElement('div')
plot_div.id = 'plot'
document.body.appendChild(plot_div)
'''

# Plot the solution using plotly.js
data = [{'x': x, 'y': [y[i][0] for i in range(len(y))], 'name': 'Output'},
        {'x': x, 'y': [1 for _ in range(len(y))], 'name': 'Setpoint'}]
layout = {'title': 'Mass-Spring-Damper System with PID Control', 'xaxis': {'title': 'Time'}, 'yaxis': {'title': 'Displacement'}}
window.Plotly.newPlot('pid-control', data, layout)
</script>
<p height="480" id="container" width="640"></p>
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js" type="text/javascript"></script>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 / 480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Define the animation loop
def animate(timestamp):
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p height="480" id="container2" width="640"></p>
<script type="text/python">
from browser import document, window

# Set up the Three.js scene
container = document['container2']
scene = window.THREE.Scene.new()
camera = window.THREE.PerspectiveCamera.new(75, 640 /480, 0.1, 1000)
renderer = window.THREE.WebGLRenderer.new()
renderer.setSize(640, 480)
container <= renderer.domElement

# Create a cube
geometry = window.THREE.BoxGeometry.new(1, 1, 1)
material = window.THREE.MeshBasicMaterial.new({'color': 0x00ff00})
cube = window.THREE.Mesh.new(geometry, material)
scene.add(cube)

# Move the camera back so we can see the cube
camera.position.z = 5

# Set up a Raycaster for mouse interaction
raycaster = window.THREE.Raycaster.new()
mouse = window.THREE.Vector2.new()

# Define a function to handle mouse move events
def on_mouse_move(event):
    # Calculate the mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1

# Register the mouse move event handler
document.bind('mousemove', on_mouse_move)

# Define the animation loop
def animate(timestamp):
    # Update the Raycaster with the current mouse position
    raycaster.setFromCamera(mouse, camera)
    
    # Check if the Raycaster intersects with the cube
    intersects = raycaster.intersectObject(cube)
    
    # Change the cube color if it is intersected
    if len(intersects) > 0:
        cube.material.color.set(0xff0000)
    else:
        cube.material.color.set(0x00ff00)
    
    # Rotate the cube
    cube.rotation.x += 0.01
    cube.rotation.y += 0.01
    
    # Render the scene
    renderer.render(scene, camera)
    
    # Request the next frame
    window.requestAnimationFrame(animate)

# Start the animation loop
window.requestAnimationFrame(animate)
</script>
<p>STL part viewer</p>
<p height="480" id="stl" width="640"></p>
<script type="text/python">
from browser import document, html

# Create a container for the STL viewer
stl_container = html.DIV(id="stl_cont")
stl = document["stl"]
stl <= stl_container

# Load the Stl Viewer Javascript Plugin
stl_viewer_script = html.SCRIPT(src="https://www.viewstl.com/plugin/stl_viewer.min.js")
stl <= stl_viewer_script

def init_stl_viewer():
    # Create a new instance of Stl Viewer
    stl_viewer = window.StlViewer.new(document.getElementById("stl_cont"), {"models": [{"id": 0, "filename": "/downloads/block100.stl"}]})

# Wait for the Stl Viewer Javascript Plugin to load before initializing the viewer
document.bind("readystatechange", lambda: init_stl_viewer() if document.readyState == "complete" else None)
</script>
<p>Using <a href="https://www.sciencedirect.com/science/article/pii/S0950705115005043">sine-cosine algorithm</a> to optimize with constraints in Brython:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p>Plot the result by using <a href="https://plotly.com/javascript/">plotly.js</a>:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"&gt;&lt;/script&gt;
    &lt;script src="https://cdn.plot.ly/plotly-latest.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body onload="brython()"&gt;

&lt;div id="output"&gt;&lt;/div&gt;
&lt;div id="plot"&gt;&lt;/div&gt;

&lt;script type="text/python"&gt;
from browser import document
from random import random, uniform
from math import sin, cos, pi

# Define the objective function
def objective_function(x):
    return x[0]**2 + x[1]**2

# Define the constraint functions
def constraint1(x):
    return x[0] + x[1] - 2

def constraint2(x):
    return 1 - x[0] - x[1]

# Define the penalty function
def penalty_function(x):
    penalty = 0
    if constraint1(x) &gt; 0:
        penalty += constraint1(x)
    if constraint2(x) &gt; 0:
        penalty += constraint2(x)
    return penalty

# Define the fitness function
def fitness_function(x):
    return objective_function(x) + penalty_function(x)

# Define the sine cosine algorithm
def sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):
    # Initialize the population
    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]
    population_fitness = [fitness_function(individual) for individual in population]

    # Initialize the best solution
    best_solution = population[0]
    best_fitness = population_fitness[0]

    # Main loop of the algorithm
    for iteration in range(max_iterations):
        # Calculate the value of a and r1
        a = 2 - iteration * (2 / max_iterations)
        r1 = 2 * pi * random()

        # Update the population
        for i in range(population_size):
            # Calculate the value of r2, r3 and r4
            r2 = 2 * random()
            r3 = 2 * random()
            r4 = random()

            # Update the individual
            for j in range(dimension):
                if r4 &lt; 0.5:
                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])
                else:
                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])

                # Make sure the individual is within the bounds
                if population[i][j] &lt; lower_bound:
                    population[i][j] = lower_bound
                elif population[i][j] &gt; upper_bound:
                    population[i][j] = upper_bound

            # Calculate the fitness of the individual
            population_fitness[i] = fitness_function(population[i])

            # Update the best solution
            if population_fitness[i] &lt; best_fitness:
                best_solution = population[i]
                best_fitness = population_fitness[i]

        # Print the current iteration and best fitness
        print(f'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}')

    return best_solution

# Run the sine cosine algorithm to solve the optimization problem with constraints
best_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)

# Print the result
output_div = document['output']
output_div.text = f'Best Solution: {best_solution}'

# Plot the result using Plotly.js
data = [
    {
        'x': [best_solution[0]],
        'y': [best_solution[1]],
        'mode': 'markers',
        'marker': {'size': 12},
        'name': 'Best Solution'
    }
]

layout = {
    'xaxis': {'range': [-10, 10]},
    'yaxis': {'range': [-10, 10]},
}

Plotly.newPlot('plot', data, layout)
&lt;/script&gt;

&lt;script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
<p><br/><span></span><br/><br/><br/></p>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div>
<div></div>
<div><span></span></div>
<br/><br/></div>
</div>
</div>
<div></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>